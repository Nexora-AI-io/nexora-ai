// pages/api/voice-eleven.js
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST requests allowed' });
  }

  const { text } = req.body;

  const response = await fetch('https://api.elevenlabs.io/v1/text-to-speech/YOUR_VOICE_ID/stream', {
    method: 'POST',
    headers: {
      'xi-api-key': 'YOUR_ELEVENLABS_API_KEY',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      text,
      voice_settings: {
        stability: 0.5,
        similarity_boost: 0.5,
      },
    }),
  });

  if (!response.ok) {
    return res.status(500).json({ error: 'Failed to fetch audio from ElevenLabs' });
  }

  const audioBuffer = await response.arrayBuffer();
  const base64Audio = Buffer.from(audioBuffer).toString('base64');

  res.status(200).json({ audioUrl: `data:audio/mpeg;base64,${base64Audio}` });
}
// pages/api/voice-eleven.js
import axios from "axios";
import OpenAI from "openai";
import fs from "fs";
import path from "path";

// initialize OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { message } = req.body;
  if (!message) {
    return res.status(400).json({ error: "No message provided" });
  }

  try {
    // 1) Get AI reply
    const chat = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: message }],
    });
    const reply = chat.choices[0].message.content.trim();

    // 2) Generate realistic voice via ElevenLabs
    const voiceId = "Rachel";  // you can change to any ElevenLabs voice ID
    const elevenRes = await axios({
      method: "POST",
      url: `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`,
      headers: {
        "xi-api-key": process.env.ELEVENLABS_API_KEY,
        "Content-Type": "application/json",
      },
      responseType: "arraybuffer",
      data: {
        text: reply,
        voice_settings: { stability: 0.5, similarity_boost: 0.75 },
      },
    });

    // 3) Write the audio file to public/
    const audioPath = path.join(process.cwd(), "public", "voice.mp3");
    fs.writeFileSync(audioPath, Buffer.from(elevenRes.data));

    // 4) Return the text reply and path to audio
    return res.status(200).json({ reply, audio: "/voice.mp3" });
  } catch (err) {
    console.error("Voice generation error:", err);
    return res.status(500).json({ error: "Voice generation failed", details: err.message });
  }
}
